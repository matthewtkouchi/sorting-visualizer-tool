{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mkouc\\\\sorting_visualizer\\\\src\\\\components\\\\visualizer\\\\visualizer.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Navbar from \"../navbar/nav\";\nimport \"../../css/visualizer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Visualizer = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Declare state variable array\n  const Array = () => {\n    _s();\n\n    const [state, setState] = useState();\n  };\n\n  _s(Array, \"NTqKeJem0kxPdWdnhkCI+0oYHTA=\");\n\n  useEffect(() => {\n    resetArray();\n    console.log(\"array reset\");\n  }, []); // Declare Handlers\n\n  const resetArray = () => {\n    setArray(newArr => {\n      for (let i = 0; i < 200; i++) {\n        newArr.push(getIntFromTo(10, 1000));\n        console.log(newArr[i]);\n      }\n\n      return newArr;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        resetHandler: resetArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value / 1.5}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // Get random int from a to b\n\n\n_s2(Visualizer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Visualizer;\n\nfunction getIntFromTo(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Visualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"sources":["C:/Users/mkouc/sorting_visualizer/src/components/visualizer/visualizer.js"],"names":["React","useState","useEffect","Navbar","Visualizer","Array","state","setState","resetArray","console","log","setArray","newArr","i","push","getIntFromTo","array","map","value","idx","height","min","max","Math","floor","random"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,0BAAP;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAAA;;AACvB;AACA,QAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,UAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,EAAlC;AACD,GAFD;;AAFuB,KAEjBI,KAFiB;;AAMvBH,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,UAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAHQ,EAGN,EAHM,CAAT,CANuB,CAWvB;;AACA,QAAMF,UAAU,GAAG,MAAM;AACvBG,IAAAA,QAAQ,CAAEC,MAAD,IAAY;AACnB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,QAAAA,MAAM,CAACE,IAAP,CAAYC,YAAY,CAAC,EAAD,EAAK,IAAL,CAAxB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAYE,MAAM,CAACC,CAAD,CAAlB;AACD;;AACD,aAAOD,MAAP;AACD,KANO,CAAR;AAOD,GARD;;AAUA,sBACE;AAAA,4BACE;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,YAAY,EAAEJ;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACGQ,KAAK,CAACC,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACT;AACE,QAAA,SAAS,EAAC,WADZ;AAGE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAG,GAAEF,KAAK,GAAG,GAAI;AAAzB;AAHT,SAEOC,GAFP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAgBD,CAtCD,C,CAwCA;;;IAxCMf,U;;KAAAA,U;;AAyCN,SAASW,YAAT,CAAsBM,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,eAAejB,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"../navbar/nav\";\r\n\r\nimport \"../../css/visualizer.css\";\r\n\r\nconst Visualizer = () => {\r\n  // Declare state variable array\r\n  const Array = () => {\r\n    const [state, setState] = useState();\r\n  };\r\n\r\n  useEffect(() => {\r\n    resetArray();\r\n    console.log(\"array reset\");\r\n  }, []);\r\n\r\n  // Declare Handlers\r\n  const resetArray = () => {\r\n    setArray((newArr) => {\r\n      for (let i = 0; i < 200; i++) {\r\n        newArr.push(getIntFromTo(10, 1000));\r\n        console.log(newArr[i]);\r\n      }\r\n      return newArr;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Navbar resetHandler={resetArray} />\r\n      </div>\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ height: `${value / 1.5}px` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Get random int from a to b\r\nfunction getIntFromTo(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Visualizer;\r\n"]},"metadata":{},"sourceType":"module"}