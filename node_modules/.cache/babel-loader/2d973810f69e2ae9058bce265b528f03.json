{"ast":null,"code":"let globalSnapshot = [];\nlet globalArr = [];\n\nconst mergeSort = arr => {\n  const midpoint = arr.length / 2;\n  globalSnapshot = [[...arr]];\n  globalArr = arr; // Base case\n\n  if (globalArr.length < 2) {\n    return arr;\n  }\n\n  const splitArr = arr.splice(0, midpoint);\n  merge(mergeSort(splitArr), mergeSort(globalArr));\n  return globalSnapshot;\n};\n\nconst merge = (left, right) => {\n  let arr = []; // Break out of loop if any one of the array gets empty\n\n  while (left.length && right.length) {\n    // Pick the smaller among the smallest element of left and right sub arrays\n    if (left[0] < right[0]) {\n      arr.push(left.shift());\n      globalSnapshot.push([...arr]);\n    } else {\n      arr.push(right.shift());\n      globalSnapshot.push([...arr]);\n    }\n  } // Concatenating the leftover elements\n  // (in case we didn't go through the entire left or right array)\n\n\n  return [...arr, ...left, ...right];\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","globalArr","mergeSort","arr","midpoint","length","splitArr","splice","merge","left","right","push","shift"],"mappings":"AAAA,IAAIA,cAAc,GAAG,EAArB;AACA,IAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAAS;AACzB,QAAMC,QAAQ,GAAGD,GAAG,CAACE,MAAJ,GAAa,CAA9B;AACAL,EAAAA,cAAc,GAAG,CAAC,CAAC,GAAGG,GAAJ,CAAD,CAAjB;AACAF,EAAAA,SAAS,GAAGE,GAAZ,CAHyB,CAKzB;;AACA,MAAIF,SAAS,CAACI,MAAV,GAAmB,CAAvB,EAA0B;AACxB,WAAOF,GAAP;AACD;;AAED,QAAMG,QAAQ,GAAGH,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAcH,QAAd,CAAjB;AACAI,EAAAA,KAAK,CAACN,SAAS,CAACI,QAAD,CAAV,EAAsBJ,SAAS,CAACD,SAAD,CAA/B,CAAL;AAEA,SAAOD,cAAP;AACD,CAdD;;AAgBA,MAAMQ,KAAK,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC7B,MAAIP,GAAG,GAAG,EAAV,CAD6B,CAE7B;;AACA,SAAOM,IAAI,CAACJ,MAAL,IAAeK,KAAK,CAACL,MAA5B,EAAoC;AAClC;AACA,QAAII,IAAI,CAAC,CAAD,CAAJ,GAAUC,KAAK,CAAC,CAAD,CAAnB,EAAwB;AACtBP,MAAAA,GAAG,CAACQ,IAAJ,CAASF,IAAI,CAACG,KAAL,EAAT;AACAZ,MAAAA,cAAc,CAACW,IAAf,CAAoB,CAAC,GAAGR,GAAJ,CAApB;AACD,KAHD,MAGO;AACLA,MAAAA,GAAG,CAACQ,IAAJ,CAASD,KAAK,CAACE,KAAN,EAAT;AACAZ,MAAAA,cAAc,CAACW,IAAf,CAAoB,CAAC,GAAGR,GAAJ,CAApB;AACD;AACF,GAZ4B,CAc7B;AACA;;;AACA,SAAO,CAAC,GAAGA,GAAJ,EAAS,GAAGM,IAAZ,EAAkB,GAAGC,KAArB,CAAP;AACD,CAjBD;;AAmBA,eAAeR,SAAf","sourcesContent":["let globalSnapshot = [];\r\nlet globalArr = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  const midpoint = arr.length / 2;\r\n  globalSnapshot = [[...arr]];\r\n  globalArr = arr;\r\n\r\n  // Base case\r\n  if (globalArr.length < 2) {\r\n    return arr;\r\n  }\r\n\r\n  const splitArr = arr.splice(0, midpoint);\r\n  merge(mergeSort(splitArr), mergeSort(globalArr));\r\n\r\n  return globalSnapshot;\r\n};\r\n\r\nconst merge = (left, right) => {\r\n  let arr = [];\r\n  // Break out of loop if any one of the array gets empty\r\n  while (left.length && right.length) {\r\n    // Pick the smaller among the smallest element of left and right sub arrays\r\n    if (left[0] < right[0]) {\r\n      arr.push(left.shift());\r\n      globalSnapshot.push([...arr]);\r\n    } else {\r\n      arr.push(right.shift());\r\n      globalSnapshot.push([...arr]);\r\n    }\r\n  }\r\n\r\n  // Concatenating the leftover elements\r\n  // (in case we didn't go through the entire left or right array)\r\n  return [...arr, ...left, ...right];\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}