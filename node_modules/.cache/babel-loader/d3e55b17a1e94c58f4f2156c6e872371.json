{"ast":null,"code":"let globalSnapshot = [];\nlet globalArr = [];\n\nconst mergeSort = arr => {\n  globalArr = arr;\n  globalSnapshot = [[...arr]];\n  mergeSortHelper(globalArr);\n  return globalSnapshot;\n};\n\nconst mergeSortHelper = arr => {\n  if (arr === null) {\n    return;\n  }\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  if (arr.length > 1) {\n    i = 0;\n    j = 0;\n    k = 0;\n    const mid = parseInt(arr.length / 2);\n    console.log(\"array: \");\n    console.log(arr);\n    console.log(mid); // Split left part\n\n    const left = arr.slice(0, mid);\n    console.log(\"left: \");\n    console.log(left); // Split right part\n\n    const right = arr.slice(mid, arr.length);\n    console.log(\"right: \");\n    console.log(right);\n    mergeSortHelper(left);\n    mergeSortHelper(right);\n    i = 0;\n    j = 0;\n    k = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i].value < right[j].value) {\n        globalArr[k] = left[i];\n        globalSnapshot.push([...globalArr]);\n        i++;\n      } else {\n        globalArr[k] = right[j];\n        globalSnapshot.push([...globalArr]);\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      globalArr[k] = left[i];\n      globalSnapshot.push([...globalArr]);\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      globalArr[k] = right[j];\n      globalSnapshot.push([...globalArr]);\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","globalArr","mergeSort","arr","mergeSortHelper","i","j","k","length","mid","parseInt","console","log","left","slice","right","value","push"],"mappings":"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","sourcesContent":["let globalSnapshot = [];\r\nlet globalArr = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  globalArr = arr;\r\n  globalSnapshot = [[...arr]];\r\n  mergeSortHelper(globalArr);\r\n  return globalSnapshot;\r\n};\r\n\r\nconst mergeSortHelper = (arr) => {\r\n  if (arr === null) {\r\n    return;\r\n  }\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = 0;\r\n\r\n  if (arr.length > 1) {\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    const mid = parseInt(arr.length / 2);\r\n    console.log(\"array: \");\r\n    console.log(arr);\r\n    console.log(mid);\r\n    // Split left part\r\n    const left = arr.slice(0, mid);\r\n    console.log(\"left: \");\r\n    console.log(left);\r\n\r\n    // Split right part\r\n    const right = arr.slice(mid, arr.length);\r\n    console.log(\"right: \");\r\n    console.log(right);\r\n\r\n    mergeSortHelper(left);\r\n    mergeSortHelper(right);\r\n\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i].value < right[j].value) {\r\n        globalArr[k] = left[i];\r\n        globalSnapshot.push([...globalArr]);\r\n        i++;\r\n      } else {\r\n        globalArr[k] = right[j];\r\n        globalSnapshot.push([...globalArr]);\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      globalArr[k] = left[i];\r\n      globalSnapshot.push([...globalArr]);\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      globalArr[k] = right[j];\r\n      globalSnapshot.push([...globalArr]);\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}