{"ast":null,"code":"/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: quickSort.js\r\n Date: JUN_6_2021\r\n \r\n Abstract: Quick sort uses a pivot and partitions the array to have indexes with lesser values on one side and with greater values on\r\n the opposite side. Then afer setting a new pivot by ... , the array is partitioned again. This is done by recursivley calling \r\n quick sort on both sides of the pivot (both sides essentially act as individual arrays) This goes on until the starting idx is equal to \r\n or greater than the end idx, meaning each partition is just a single element.  \r\n***************************************************************************************************************************************/\nimport { swap } from \"./util\";\nlet globalSnapshot = [];\nlet globalArr = [];\n\nconst quickSort = arr => {\n  const start = 0;\n  const end = arr.length - 1;\n  globalArr = arr;\n  globalSnapshot = [[...arr]];\n  quickSortHelper(globalArr, start, end);\n  return globalSnapshot;\n};\n\nconst quickSortHelper = (arr, start, end) => {\n  if (start >= end) {\n    return;\n  }\n\n  const index = partition(arr, start, end);\n  quickSortHelper(globalArr, start, index - 1);\n  quickSortHelper(globalArr, index, end);\n};\n\nconst partition = (arr, start, end) => {\n  for (let i = start; i < end; i++) {}\n\n  let pivotValue = arr[end].value;\n  let pivotIndex = start;\n\n  for (let i = start; i < end; i++) {\n    if (arr[i].value < pivotValue) {\n      swap(arr, i, pivotIndex);\n      globalArr = arr;\n      globalSnapshot.push([...arr]);\n      pivotIndex++;\n    }\n  }\n\n  swap(arr, pivotIndex, end);\n  globalArr = arr;\n  globalSnapshot.push([...arr]);\n  return pivotIndex;\n};\n\nexport default quickSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/quickSort.js"],"names":["swap","globalSnapshot","globalArr","quickSort","arr","start","end","length","quickSortHelper","index","partition","i","pivotValue","value","pivotIndex","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,QAAqB,QAArB;AAEA,IAAIC,cAAc,GAAG,EAArB;AACA,IAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAAS;AACzB,QAAMC,KAAK,GAAG,CAAd;AACA,QAAMC,GAAG,GAAGF,GAAG,CAACG,MAAJ,GAAa,CAAzB;AACAL,EAAAA,SAAS,GAAGE,GAAZ;AACAH,EAAAA,cAAc,GAAG,CAAC,CAAC,GAAGG,GAAJ,CAAD,CAAjB;AAEAI,EAAAA,eAAe,CAACN,SAAD,EAAYG,KAAZ,EAAmBC,GAAnB,CAAf;AAEA,SAAOL,cAAP;AACD,CATD;;AAWA,MAAMO,eAAe,GAAG,CAACJ,GAAD,EAAMC,KAAN,EAAaC,GAAb,KAAqB;AAC3C,MAAID,KAAK,IAAIC,GAAb,EAAkB;AAChB;AACD;;AAED,QAAMG,KAAK,GAAGC,SAAS,CAACN,GAAD,EAAMC,KAAN,EAAaC,GAAb,CAAvB;AAEAE,EAAAA,eAAe,CAACN,SAAD,EAAYG,KAAZ,EAAmBI,KAAK,GAAG,CAA3B,CAAf;AACAD,EAAAA,eAAe,CAACN,SAAD,EAAYO,KAAZ,EAAmBH,GAAnB,CAAf;AACD,CATD;;AAWA,MAAMI,SAAS,GAAG,CAACN,GAAD,EAAMC,KAAN,EAAaC,GAAb,KAAqB;AACrC,OAAK,IAAIK,CAAC,GAAGN,KAAb,EAAoBM,CAAC,GAAGL,GAAxB,EAA6BK,CAAC,EAA9B,EAAkC,CAAE;;AAEpC,MAAIC,UAAU,GAAGR,GAAG,CAACE,GAAD,CAAH,CAASO,KAA1B;AACA,MAAIC,UAAU,GAAGT,KAAjB;;AAEA,OAAK,IAAIM,CAAC,GAAGN,KAAb,EAAoBM,CAAC,GAAGL,GAAxB,EAA6BK,CAAC,EAA9B,EAAkC;AAChC,QAAIP,GAAG,CAACO,CAAD,CAAH,CAAOE,KAAP,GAAeD,UAAnB,EAA+B;AAC7BZ,MAAAA,IAAI,CAACI,GAAD,EAAMO,CAAN,EAASG,UAAT,CAAJ;AACAZ,MAAAA,SAAS,GAAGE,GAAZ;AACAH,MAAAA,cAAc,CAACc,IAAf,CAAoB,CAAC,GAAGX,GAAJ,CAApB;AACAU,MAAAA,UAAU;AACX;AACF;;AACDd,EAAAA,IAAI,CAACI,GAAD,EAAMU,UAAN,EAAkBR,GAAlB,CAAJ;AACAJ,EAAAA,SAAS,GAAGE,GAAZ;AACAH,EAAAA,cAAc,CAACc,IAAf,CAAoB,CAAC,GAAGX,GAAJ,CAApB;AAEA,SAAOU,UAAP;AACD,CAnBD;;AAqBA,eAAeX,SAAf","sourcesContent":["/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: quickSort.js\r\n Date: JUN_6_2021\r\n \r\n Abstract: Quick sort uses a pivot and partitions the array to have indexes with lesser values on one side and with greater values on\r\n the opposite side. Then afer setting a new pivot by ... , the array is partitioned again. This is done by recursivley calling \r\n quick sort on both sides of the pivot (both sides essentially act as individual arrays) This goes on until the starting idx is equal to \r\n or greater than the end idx, meaning each partition is just a single element.  \r\n***************************************************************************************************************************************/\r\n\r\nimport { swap } from \"./util\";\r\n\r\nlet globalSnapshot = [];\r\nlet globalArr = [];\r\n\r\nconst quickSort = (arr) => {\r\n  const start = 0;\r\n  const end = arr.length - 1;\r\n  globalArr = arr;\r\n  globalSnapshot = [[...arr]];\r\n\r\n  quickSortHelper(globalArr, start, end);\r\n\r\n  return globalSnapshot;\r\n};\r\n\r\nconst quickSortHelper = (arr, start, end) => {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n\r\n  const index = partition(arr, start, end);\r\n\r\n  quickSortHelper(globalArr, start, index - 1);\r\n  quickSortHelper(globalArr, index, end);\r\n};\r\n\r\nconst partition = (arr, start, end) => {\r\n  for (let i = start; i < end; i++) {}\r\n\r\n  let pivotValue = arr[end].value;\r\n  let pivotIndex = start;\r\n\r\n  for (let i = start; i < end; i++) {\r\n    if (arr[i].value < pivotValue) {\r\n      swap(arr, i, pivotIndex);\r\n      globalArr = arr;\r\n      globalSnapshot.push([...arr]);\r\n      pivotIndex++;\r\n    }\r\n  }\r\n  swap(arr, pivotIndex, end);\r\n  globalArr = arr;\r\n  globalSnapshot.push([...arr]);\r\n\r\n  return pivotIndex;\r\n};\r\n\r\nexport default quickSort;\r\n"]},"metadata":{},"sourceType":"module"}