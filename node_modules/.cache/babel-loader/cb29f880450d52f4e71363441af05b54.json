{"ast":null,"code":"let globalSnapshot = [];\nlet globalArr = [];\n\nconst mergeSort = arr => {\n  globalArr = arr;\n  globalSnapshot = [[...arr]];\n  mergeSortHelper(globalArr);\n  return globalSnapshot;\n};\n\nconst mergeSortHelper = arr => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  if (arr.length <= 1) {\n    return;\n  } else {\n    i = 0;\n    j = 0;\n    k = 0;\n    const mid = parseInt(arr.length / 2); // Split left part\n\n    const left = [...arr].slice(0, mid);\n\n    for (i = 0; i < mid; i++) {\n      left[i].value = arr[i].value;\n    }\n\n    console.log(left); // Split right part\n\n    const right = [...arr].slice(mid, arr.length);\n\n    for (i = mid; i < arr.length; i++) {\n      right[i - mid].value = arr[i].value;\n    }\n\n    mergeSortHelper(left);\n    mergeSortHelper(right);\n    i = 0;\n    j = 0;\n    k = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i] < right[j]) {\n        globalArr[k].value = left[i];\n        globalSnapshot.push([...globalArr]);\n        i++;\n      } else {\n        globalArr[k].value = right[j];\n        globalSnapshot.push([...globalArr]);\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      globalArr[k].value = left[i];\n      globalSnapshot.push([...globalArr]);\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      globalArr[k].value = right[j];\n      globalSnapshot.push([...globalArr]);\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","globalArr","mergeSort","arr","mergeSortHelper","i","j","k","length","mid","parseInt","left","slice","value","console","log","right","push"],"mappings":"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","sourcesContent":["let globalSnapshot = [];\r\nlet globalArr = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  globalArr = arr;\r\n  globalSnapshot = [[...arr]];\r\n  mergeSortHelper(globalArr);\r\n  return globalSnapshot;\r\n};\r\n\r\nconst mergeSortHelper = (arr) => {\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = 0;\r\n\r\n  if (arr.length <= 1) {\r\n    return;\r\n  } else {\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    const mid = parseInt(arr.length / 2);\r\n\r\n    // Split left part\r\n    const left = [...arr].slice(0, mid);\r\n    for (i = 0; i < mid; i++) {\r\n      left[i].value = arr[i].value;\r\n    }\r\n    console.log(left);\r\n\r\n    // Split right part\r\n    const right = [...arr].slice(mid, arr.length);\r\n    for (i = mid; i < arr.length; i++) {\r\n      right[i - mid].value = arr[i].value;\r\n    }\r\n    mergeSortHelper(left);\r\n    mergeSortHelper(right);\r\n\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i] < right[j]) {\r\n        globalArr[k].value = left[i];\r\n        globalSnapshot.push([...globalArr]);\r\n        i++;\r\n      } else {\r\n        globalArr[k].value = right[j];\r\n        globalSnapshot.push([...globalArr]);\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      globalArr[k].value = left[i];\r\n      globalSnapshot.push([...globalArr]);\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      globalArr[k].value = right[j];\r\n      globalSnapshot.push([...globalArr]);\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}