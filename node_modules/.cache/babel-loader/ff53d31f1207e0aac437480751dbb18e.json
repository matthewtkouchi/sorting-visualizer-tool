{"ast":null,"code":"const mergeSort = arr => {\n  if (arr == null) {\n    return;\n  }\n\n  if (arr.length > 1) {\n    const mid = parseInt(arr.length / 2); // Split left part\n\n    const left = Array(mid).fill(0);\n\n    for (i = 0; i < mid; i++) {\n      left[i] = arr[i];\n    } // Split right part\n\n\n    const right = Array(arr.length - mid).fill(0);\n\n    for (i = mid; i < arr.length; i++) {\n      right[i - mid] = arr[i];\n    }\n\n    mergeSort(left);\n    mergeSort(right);\n    const i = 0;\n    const j = 0;\n    const k = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i] < right[j]) {\n        arr[k] = left[i];\n        i++;\n      } else {\n        arr[k] = right[j];\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      arr[k] = left[i];\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      arr[k] = right[j];\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["mergeSort","arr","length","mid","parseInt","left","Array","fill","i","right","j","k"],"mappings":"AAAA,MAAMA,SAAS,GAAIC,GAAD,IAAS;AACzB,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AAED,MAAIA,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,UAAMC,GAAG,GAAGC,QAAQ,CAACH,GAAG,CAACC,MAAJ,GAAa,CAAd,CAApB,CADkB,CAGlB;;AACA,UAAMG,IAAI,GAAGC,KAAK,CAACH,GAAD,CAAL,CAAWI,IAAX,CAAgB,CAAhB,CAAb;;AACA,SAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,GAAhB,EAAqBK,CAAC,EAAtB,EAA0B;AACxBH,MAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUP,GAAG,CAACO,CAAD,CAAb;AACD,KAPiB,CASlB;;;AACA,UAAMC,KAAK,GAAGH,KAAK,CAACL,GAAG,CAACC,MAAJ,GAAaC,GAAd,CAAL,CAAwBI,IAAxB,CAA6B,CAA7B,CAAd;;AACA,SAAKC,CAAC,GAAGL,GAAT,EAAcK,CAAC,GAAGP,GAAG,CAACC,MAAtB,EAA8BM,CAAC,EAA/B,EAAmC;AACjCC,MAAAA,KAAK,CAACD,CAAC,GAAGL,GAAL,CAAL,GAAiBF,GAAG,CAACO,CAAD,CAApB;AACD;;AACDR,IAAAA,SAAS,CAACK,IAAD,CAAT;AACAL,IAAAA,SAAS,CAACS,KAAD,CAAT;AAEA,UAAMD,CAAC,GAAG,CAAV;AACA,UAAME,CAAC,GAAG,CAAV;AACA,UAAMC,CAAC,GAAG,CAAV,CAnBkB,CAqBlB;;AACA,WAAOH,CAAC,GAAGH,IAAI,CAACH,MAAT,IAAmBQ,CAAC,GAAGD,KAAK,CAACP,MAApC,EAA4C;AAC1C,UAAIG,IAAI,CAACG,CAAD,CAAJ,GAAUC,KAAK,CAACC,CAAD,CAAnB,EAAwB;AACtBT,QAAAA,GAAG,CAACU,CAAD,CAAH,GAASN,IAAI,CAACG,CAAD,CAAb;AACAA,QAAAA,CAAC;AACF,OAHD,MAGO;AACLP,QAAAA,GAAG,CAACU,CAAD,CAAH,GAASF,KAAK,CAACC,CAAD,CAAd;AACAA,QAAAA,CAAC;AACF;;AACDC,MAAAA,CAAC;AACF,KA/BiB,CAgClB;;;AACA,WAAOH,CAAC,GAAGH,IAAI,CAACH,MAAhB,EAAwB;AACtBD,MAAAA,GAAG,CAACU,CAAD,CAAH,GAASN,IAAI,CAACG,CAAD,CAAb;AACAA,MAAAA,CAAC;AACDG,MAAAA,CAAC;AACF;;AACD,WAAOD,CAAC,GAAGD,KAAK,CAACP,MAAjB,EAAyB;AACvBD,MAAAA,GAAG,CAACU,CAAD,CAAH,GAASF,KAAK,CAACC,CAAD,CAAd;AACAA,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACF;AACF;AACF,CAjDD;;AAmDA,eAAeX,SAAf","sourcesContent":["const mergeSort = (arr) => {\r\n  if (arr == null) {\r\n    return;\r\n  }\r\n\r\n  if (arr.length > 1) {\r\n    const mid = parseInt(arr.length / 2);\r\n\r\n    // Split left part\r\n    const left = Array(mid).fill(0);\r\n    for (i = 0; i < mid; i++) {\r\n      left[i] = arr[i];\r\n    }\r\n\r\n    // Split right part\r\n    const right = Array(arr.length - mid).fill(0);\r\n    for (i = mid; i < arr.length; i++) {\r\n      right[i - mid] = arr[i];\r\n    }\r\n    mergeSort(left);\r\n    mergeSort(right);\r\n\r\n    const i = 0;\r\n    const j = 0;\r\n    const k = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i] < right[j]) {\r\n        arr[k] = left[i];\r\n        i++;\r\n      } else {\r\n        arr[k] = right[j];\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      arr[k] = left[i];\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      arr[k] = right[j];\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}