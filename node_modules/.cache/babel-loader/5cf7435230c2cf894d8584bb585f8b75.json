{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mkouc\\\\sorting_visualizer\\\\src\\\\components\\\\visualizer\\\\visualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Navbar from \"../navbar/nav\";\nimport \"../../css/visualizer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Visualizer = () => {\n  _s();\n\n  // Test Array before I initialize an array on start-up\n  let testArr = [];\n\n  for (let k = 0; k < 200; k++) {\n    testArr.push(getIntFromTo(10, 1000));\n  } // Declare state variable array\n\n\n  const [array, setArray] = useState(testArr); // Declare Handlers\n\n  const resetArray = () => {\n    setArray(prev => {\n      for (let i = 0; i < 200; i++) {\n        prev.push(getIntFromTo(10, 1000));\n        return prev;\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Navbar, {\n        resetHandler: resetArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value / 1.5}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Visualizer, \"hWn7krzsRtEMnTgFsV3BOTBXNPo=\");\n\n_c = Visualizer;\n\nfunction getIntFromTo(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default Visualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Visualizer\");","map":{"version":3,"sources":["C:/Users/mkouc/sorting_visualizer/src/components/visualizer/visualizer.js"],"names":["React","useState","Navbar","Visualizer","testArr","k","push","getIntFromTo","array","setArray","resetArray","prev","i","map","value","idx","height","min","max","Math","floor","random"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,0BAAP;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,OAAO,CAACE,IAAR,CAAaC,YAAY,CAAC,EAAD,EAAK,IAAL,CAAzB;AACD,GANsB,CAQvB;;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACG,OAAD,CAAlC,CATuB,CAWvB;;AACA,QAAMM,UAAU,GAAG,MAAM;AACvBD,IAAAA,QAAQ,CAAEE,IAAD,IAAU;AACjB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,QAAAA,IAAI,CAACL,IAAL,CAAUC,YAAY,CAAC,EAAD,EAAK,IAAL,CAAtB;AACA,eAAOI,IAAP;AACD;AACF,KALO,CAAR;AAMD,GAPD;;AASA,sBACE;AAAA,4BACE;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,YAAY,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACGF,KAAK,CAACK,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACT;AACE,QAAA,SAAS,EAAC,WADZ;AAGE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAG,GAAEF,KAAK,GAAG,GAAI;AAAzB;AAHT,SAEOC,GAFP;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAgBD,CArCD;;GAAMZ,U;;KAAAA,U;;AAuCN,SAASI,YAAT,CAAsBU,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAED,eAAed,UAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Navbar from \"../navbar/nav\";\r\n\r\nimport \"../../css/visualizer.css\";\r\n\r\nconst Visualizer = () => {\r\n  // Test Array before I initialize an array on start-up\r\n  let testArr = [];\r\n\r\n  for (let k = 0; k < 200; k++) {\r\n    testArr.push(getIntFromTo(10, 1000));\r\n  }\r\n\r\n  // Declare state variable array\r\n  const [array, setArray] = useState(testArr);\r\n\r\n  // Declare Handlers\r\n  const resetArray = () => {\r\n    setArray((prev) => {\r\n      for (let i = 0; i < 200; i++) {\r\n        prev.push(getIntFromTo(10, 1000));\r\n        return prev;\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Navbar resetHandler={resetArray} />\r\n      </div>\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ height: `${value / 1.5}px` }}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction getIntFromTo(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport default Visualizer;\r\n"]},"metadata":{},"sourceType":"module"}