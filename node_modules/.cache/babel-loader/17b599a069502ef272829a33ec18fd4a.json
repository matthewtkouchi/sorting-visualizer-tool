{"ast":null,"code":"/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: mergeSort.js\r\n Date: JUN_11_2021\r\n \r\n Abstract: Merge Sort uses a mid point to constantly split an array into smaller sub-arrays until only one element remains on the right\r\n and left sub-array. This way, it is automatically sorted b/c it contains one element. Then it recursivley exits its calls, sorting and \r\n merging the left and right sub-arrays of wherever the function is in the tree, until it finally fully merges into a sorted array. \r\n***************************************************************************************************************************************/\nimport { highlightIdx, clearIdx } from \"./util\";\nlet globalSnapshot = [];\nlet globalArr = [];\n\nconst mergeSort = arr => {\n  globalArr = arr;\n  globalSnapshot = [[...arr]];\n  mergeSortHelper(globalArr); // Algorithm finished Sorting\n\n  globalSnapshot[globalSnapshot.length - 1].forEach(idx => {\n    idx.highlighted = false;\n    idx.sorted = true;\n  });\n  return globalSnapshot;\n};\n\nconst mergeSortHelper = arr => {\n  if (arr === null) {\n    return;\n  }\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  if (arr.length > 1) {\n    const mid = parseInt(arr.length / 2); // Split left part\n    //const left = arr.slice(0, mid);\n\n    const left = new Array(mid).fill(0);\n\n    for (i = 0; i < mid; i++) {\n      left[i] = arr[i];\n    } // Split right part\n    //const right = arr.slice(mid, arr.length);\n\n\n    const right = new Array(arr.length - mid).fill(0);\n\n    for (i = mid; i < arr.length; i++) {\n      right[i - mid] = arr[i];\n    }\n\n    mergeSortHelper(left);\n    mergeSortHelper(right);\n    i = 0;\n    j = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i].value < right[j].value) {\n        arr[k] = left[i];\n        globalArr[k] = arr[k];\n        highlightIdx(globalArr, k);\n        highlightIdx(globalArr, i);\n        globalSnapshot.push([...globalArr]);\n        clearIdx(globalArr, k);\n        clearIdx(globalArr, i);\n        i++;\n      } else {\n        arr[k] = right[j];\n        globalArr[k] = arr[k];\n        highlightIdx(globalArr, k);\n        highlightIdx(globalArr, i);\n        globalSnapshot.push([...globalArr]);\n        clearIdx(globalArr, k);\n        clearIdx(globalArr, i);\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      arr[k] = left[i];\n      globalArr[k] = arr[k];\n      highlightIdx(globalArr, k);\n      highlightIdx(globalArr, i);\n      globalSnapshot.push([...globalArr]);\n      clearIdx(globalArr, k);\n      clearIdx(globalArr, i);\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      arr[k] = right[j];\n      globalArr[k] = arr[k];\n      highlightIdx(globalArr, k);\n      highlightIdx(globalArr, j);\n      globalSnapshot.push([...globalArr]);\n      clearIdx(globalArr, k);\n      clearIdx(globalArr, j);\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["highlightIdx","clearIdx","globalSnapshot","globalArr","mergeSort","arr","mergeSortHelper","length","forEach","idx","highlighted","sorted","i","j","k","mid","parseInt","left","Array","fill","right","value","push"],"mappings":"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","sourcesContent":["/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: mergeSort.js\r\n Date: JUN_11_2021\r\n \r\n Abstract: Merge Sort uses a mid point to constantly split an array into smaller sub-arrays until only one element remains on the right\r\n and left sub-array. This way, it is automatically sorted b/c it contains one element. Then it recursivley exits its calls, sorting and \r\n merging the left and right sub-arrays of wherever the function is in the tree, until it finally fully merges into a sorted array. \r\n***************************************************************************************************************************************/\r\n\r\nimport { highlightIdx, clearIdx } from \"./util\";\r\n\r\nlet globalSnapshot = [];\r\nlet globalArr = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  globalArr = arr;\r\n  globalSnapshot = [[...arr]];\r\n  mergeSortHelper(globalArr);\r\n\r\n  // Algorithm finished Sorting\r\n  globalSnapshot[globalSnapshot.length - 1].forEach((idx) => {\r\n    idx.highlighted = false;\r\n    idx.sorted = true;\r\n  });\r\n  return globalSnapshot;\r\n};\r\n\r\nconst mergeSortHelper = (arr) => {\r\n  if (arr === null) {\r\n    return;\r\n  }\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = 0;\r\n\r\n  if (arr.length > 1) {\r\n    const mid = parseInt(arr.length / 2);\r\n\r\n    // Split left part\r\n    //const left = arr.slice(0, mid);\r\n    const left = new Array(mid).fill(0);\r\n    for (i = 0; i < mid; i++) {\r\n      left[i] = arr[i];\r\n    }\r\n\r\n    // Split right part\r\n    //const right = arr.slice(mid, arr.length);\r\n    const right = new Array(arr.length - mid).fill(0);\r\n    for (i = mid; i < arr.length; i++) {\r\n      right[i - mid] = arr[i];\r\n    }\r\n\r\n    mergeSortHelper(left);\r\n    mergeSortHelper(right);\r\n\r\n    i = 0;\r\n    j = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i].value < right[j].value) {\r\n        arr[k] = left[i];\r\n        globalArr[k] = arr[k];\r\n        highlightIdx(globalArr, k);\r\n        highlightIdx(globalArr, i);\r\n        globalSnapshot.push([...globalArr]);\r\n        clearIdx(globalArr, k);\r\n        clearIdx(globalArr, i);\r\n        i++;\r\n      } else {\r\n        arr[k] = right[j];\r\n        globalArr[k] = arr[k];\r\n        highlightIdx(globalArr, k);\r\n        highlightIdx(globalArr, i);\r\n        globalSnapshot.push([...globalArr]);\r\n        clearIdx(globalArr, k);\r\n        clearIdx(globalArr, i);\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      arr[k] = left[i];\r\n      globalArr[k] = arr[k];\r\n      highlightIdx(globalArr, k);\r\n      highlightIdx(globalArr, i);\r\n      globalSnapshot.push([...globalArr]);\r\n      clearIdx(globalArr, k);\r\n      clearIdx(globalArr, i);\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      arr[k] = right[j];\r\n      globalArr[k] = arr[k];\r\n      highlightIdx(globalArr, k);\r\n      highlightIdx(globalArr, j);\r\n      globalSnapshot.push([...globalArr]);\r\n      clearIdx(globalArr, k);\r\n      clearIdx(globalArr, j);\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}