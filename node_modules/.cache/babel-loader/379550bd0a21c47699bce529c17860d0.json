{"ast":null,"code":"const globalSnapshot = [];\n\nconst mergeSort = arr => {\n  if (arr == null) {\n    return;\n  }\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  if (arr.length > 1) {\n    i = 0;\n    j = 0;\n    k = 0;\n    const mid = parseInt(arr.length / 2); // Split left part\n\n    const left = Array(mid).fill(0);\n\n    for (i = 0; i < mid; i++) {\n      left[i] = arr[i];\n    } // Split right part\n\n\n    const right = Array(arr.length - mid).fill(0);\n\n    for (i = mid; i < arr.length; i++) {\n      right[i - mid] = arr[i];\n    }\n\n    mergeSort(left);\n    mergeSort(right);\n    i = 0;\n    j = 0;\n    k = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i] < right[j]) {\n        arr[k] = left[i];\n        globalSnapshot.push([...arr]);\n        i++;\n      } else {\n        arr[k] = right[j];\n        globalSnapshot.push([...arr]);\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      arr[k] = left[i];\n      globalSnapshot.push([...arr]);\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      arr[k] = right[j];\n      globalSnapshot.push([...arr]);\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","mergeSort","arr","i","j","k","length","mid","parseInt","left","Array","fill","right","push"],"mappings":"AAAA,MAAMA,cAAc,GAAG,EAAvB;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAAS;AACzB,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf;AACD;;AACD,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,MAAIH,GAAG,CAACI,MAAJ,GAAa,CAAjB,EAAoB;AAClBH,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AAEA,UAAME,GAAG,GAAGC,QAAQ,CAACN,GAAG,CAACI,MAAJ,GAAa,CAAd,CAApB,CALkB,CAOlB;;AACA,UAAMG,IAAI,GAAGC,KAAK,CAACH,GAAD,CAAL,CAAWI,IAAX,CAAgB,CAAhB,CAAb;;AACA,SAAKR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGI,GAAhB,EAAqBJ,CAAC,EAAtB,EAA0B;AACxBM,MAAAA,IAAI,CAACN,CAAD,CAAJ,GAAUD,GAAG,CAACC,CAAD,CAAb;AACD,KAXiB,CAalB;;;AACA,UAAMS,KAAK,GAAGF,KAAK,CAACR,GAAG,CAACI,MAAJ,GAAaC,GAAd,CAAL,CAAwBI,IAAxB,CAA6B,CAA7B,CAAd;;AACA,SAAKR,CAAC,GAAGI,GAAT,EAAcJ,CAAC,GAAGD,GAAG,CAACI,MAAtB,EAA8BH,CAAC,EAA/B,EAAmC;AACjCS,MAAAA,KAAK,CAACT,CAAC,GAAGI,GAAL,CAAL,GAAiBL,GAAG,CAACC,CAAD,CAApB;AACD;;AACDF,IAAAA,SAAS,CAACQ,IAAD,CAAT;AACAR,IAAAA,SAAS,CAACW,KAAD,CAAT;AAEAT,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ,CAvBkB,CAyBlB;;AACA,WAAOF,CAAC,GAAGM,IAAI,CAACH,MAAT,IAAmBF,CAAC,GAAGQ,KAAK,CAACN,MAApC,EAA4C;AAC1C,UAAIG,IAAI,CAACN,CAAD,CAAJ,GAAUS,KAAK,CAACR,CAAD,CAAnB,EAAwB;AACtBF,QAAAA,GAAG,CAACG,CAAD,CAAH,GAASI,IAAI,CAACN,CAAD,CAAb;AACAH,QAAAA,cAAc,CAACa,IAAf,CAAoB,CAAC,GAAGX,GAAJ,CAApB;AACAC,QAAAA,CAAC;AACF,OAJD,MAIO;AACLD,QAAAA,GAAG,CAACG,CAAD,CAAH,GAASO,KAAK,CAACR,CAAD,CAAd;AACAJ,QAAAA,cAAc,CAACa,IAAf,CAAoB,CAAC,GAAGX,GAAJ,CAApB;AACAE,QAAAA,CAAC;AACF;;AACDC,MAAAA,CAAC;AACF,KArCiB,CAsClB;;;AACA,WAAOF,CAAC,GAAGM,IAAI,CAACH,MAAhB,EAAwB;AACtBJ,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASI,IAAI,CAACN,CAAD,CAAb;AACAH,MAAAA,cAAc,CAACa,IAAf,CAAoB,CAAC,GAAGX,GAAJ,CAApB;AACAC,MAAAA,CAAC;AACDE,MAAAA,CAAC;AACF;;AACD,WAAOD,CAAC,GAAGQ,KAAK,CAACN,MAAjB,EAAyB;AACvBJ,MAAAA,GAAG,CAACG,CAAD,CAAH,GAASO,KAAK,CAACR,CAAD,CAAd;AACAJ,MAAAA,cAAc,CAACa,IAAf,CAAoB,CAAC,GAAGX,GAAJ,CAApB;AACAE,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACF;AACF;AACF,CA5DD;;AA8DA,eAAeJ,SAAf","sourcesContent":["const globalSnapshot = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  if (arr == null) {\r\n    return;\r\n  }\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = 0;\r\n\r\n  if (arr.length > 1) {\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    const mid = parseInt(arr.length / 2);\r\n\r\n    // Split left part\r\n    const left = Array(mid).fill(0);\r\n    for (i = 0; i < mid; i++) {\r\n      left[i] = arr[i];\r\n    }\r\n\r\n    // Split right part\r\n    const right = Array(arr.length - mid).fill(0);\r\n    for (i = mid; i < arr.length; i++) {\r\n      right[i - mid] = arr[i];\r\n    }\r\n    mergeSort(left);\r\n    mergeSort(right);\r\n\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i] < right[j]) {\r\n        arr[k] = left[i];\r\n        globalSnapshot.push([...arr]);\r\n        i++;\r\n      } else {\r\n        arr[k] = right[j];\r\n        globalSnapshot.push([...arr]);\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      arr[k] = left[i];\r\n      globalSnapshot.push([...arr]);\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      arr[k] = right[j];\r\n      globalSnapshot.push([...arr]);\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}