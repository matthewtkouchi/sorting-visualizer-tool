{"ast":null,"code":"let globalSnapshot = [];\n\nconst mergeSort = arr => {\n  globalSnapshot = [mergeSortHelper(arr)];\n  return globalSnapshot;\n};\n\nconst mergeSortHelper = a => {\n  if (a.length < 2) return a;\n  const middle = Math.floor(a.length / 2);\n  const a_l = a.slice(0, middle);\n  const a_r = a.slice(middle, a.length);\n  const sorted_l = mergeSortHelper(a_l);\n  const sorted_r = mergeSortHelper(a_r);\n  return mergeArrays(sorted_l, sorted_r);\n};\n\nconst mergeArrays = (a, b) => {\n  const c = [];\n\n  while (a.length && b.length) {\n    c.push(a[0] > b[0] ? b.shift() : a.shift());\n  } //if we still have values, let's add them at the end of `c`\n\n\n  while (a.length) {\n    c.push(a.shift());\n  }\n\n  while (b.length) {\n    c.push(b.shift());\n  }\n\n  return c;\n}; // let globalSnapshot = [];\n// const mergeSort = (arr) => {\n//   globalSnapshot = [[...arr]];\n//   let size = 1;\n//   const len = arr.length;\n//   do {\n//     let i = 0;\n//     do {\n//       const L1 = i;\n//       const R1 = i + size - 1;\n//       const L2 = i + size;\n//       let R2 = i + 2 * size - 1;\n//       if (L2 >= len) break;\n//       if (R2 >= len) R2 = len - 1;\n//       const temp = mergeArray(arr, L1, R1, L2, R2);\n//       let j = 0;\n//       do {\n//         arr[i + j] = temp[j];\n//         globalSnapshot.push([...arr]);\n//         j++;\n//       } while (j <= R2 - L1 + 1);\n//       i = i + 2 * size;\n//     } while (i < len);\n//     size = 2 * size;\n//   } while (size < len);\n//   return globalSnapshot;\n// };\n// const mergeArray = (arr, L1, R1, L2, R2) => {\n//   let temp = [];\n//   let i = 0;\n//   // While Both Sub-Arrays Can Be Spliced\n//   do {\n//     if (arr[L1] <= arr[L2]) {\n//       temp[i] = arr[L1];\n//       i++;\n//       L1++;\n//     } else {\n//       temp[i] = arr[L2];\n//       i++;\n//       L2++;\n//     }\n//   } while (L1 <= R1 && L2 <= R2);\n//   // While Left Sub-Arrays Can Be Spliced\n//   do {\n//     temp[i] = arr[L1];\n//     i++;\n//     L1++;\n//   } while (L1 <= R1);\n//   // While Right Sub-Arrays Can Be Spliced\n//   do {\n//     temp[i] = arr[L2];\n//     i++;\n//     L2++;\n//   } while (L2 <= R2);\n//   return temp;\n// };\n\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","mergeSort","arr","mergeSortHelper","a","length","middle","Math","floor","a_l","slice","a_r","sorted_l","sorted_r","mergeArrays","b","c","push","shift"],"mappings":"AAAA,IAAIA,cAAc,GAAG,EAArB;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAAS;AACzBF,EAAAA,cAAc,GAAG,CAACG,eAAe,CAACD,GAAD,CAAhB,CAAjB;AAEA,SAAOF,cAAP;AACD,CAJD;;AAMA,MAAMG,eAAe,GAAIC,CAAD,IAAO;AAC7B,MAAIA,CAAC,CAACC,MAAF,GAAW,CAAf,EAAkB,OAAOD,CAAP;AAClB,QAAME,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,CAACC,MAAF,GAAW,CAAtB,CAAf;AACA,QAAMI,GAAG,GAAGL,CAAC,CAACM,KAAF,CAAQ,CAAR,EAAWJ,MAAX,CAAZ;AACA,QAAMK,GAAG,GAAGP,CAAC,CAACM,KAAF,CAAQJ,MAAR,EAAgBF,CAAC,CAACC,MAAlB,CAAZ;AACA,QAAMO,QAAQ,GAAGT,eAAe,CAACM,GAAD,CAAhC;AACA,QAAMI,QAAQ,GAAGV,eAAe,CAACQ,GAAD,CAAhC;AACA,SAAOG,WAAW,CAACF,QAAD,EAAWC,QAAX,CAAlB;AACD,CARD;;AAUA,MAAMC,WAAW,GAAG,CAACV,CAAD,EAAIW,CAAJ,KAAU;AAC5B,QAAMC,CAAC,GAAG,EAAV;;AAEA,SAAOZ,CAAC,CAACC,MAAF,IAAYU,CAAC,CAACV,MAArB,EAA6B;AAC3BW,IAAAA,CAAC,CAACC,IAAF,CAAOb,CAAC,CAAC,CAAD,CAAD,GAAOW,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAACG,KAAF,EAAd,GAA0Bd,CAAC,CAACc,KAAF,EAAjC;AACD,GAL2B,CAO5B;;;AACA,SAAOd,CAAC,CAACC,MAAT,EAAiB;AACfW,IAAAA,CAAC,CAACC,IAAF,CAAOb,CAAC,CAACc,KAAF,EAAP;AACD;;AACD,SAAOH,CAAC,CAACV,MAAT,EAAiB;AACfW,IAAAA,CAAC,CAACC,IAAF,CAAOF,CAAC,CAACG,KAAF,EAAP;AACD;;AAED,SAAOF,CAAP;AACD,CAhBD,C,CAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA,eAAef,SAAf","sourcesContent":["let globalSnapshot = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  globalSnapshot = [mergeSortHelper(arr)];\r\n\r\n  return globalSnapshot;\r\n};\r\n\r\nconst mergeSortHelper = (a) => {\r\n  if (a.length < 2) return a;\r\n  const middle = Math.floor(a.length / 2);\r\n  const a_l = a.slice(0, middle);\r\n  const a_r = a.slice(middle, a.length);\r\n  const sorted_l = mergeSortHelper(a_l);\r\n  const sorted_r = mergeSortHelper(a_r);\r\n  return mergeArrays(sorted_l, sorted_r);\r\n};\r\n\r\nconst mergeArrays = (a, b) => {\r\n  const c = [];\r\n\r\n  while (a.length && b.length) {\r\n    c.push(a[0] > b[0] ? b.shift() : a.shift());\r\n  }\r\n\r\n  //if we still have values, let's add them at the end of `c`\r\n  while (a.length) {\r\n    c.push(a.shift());\r\n  }\r\n  while (b.length) {\r\n    c.push(b.shift());\r\n  }\r\n\r\n  return c;\r\n};\r\n\r\n// let globalSnapshot = [];\r\n\r\n// const mergeSort = (arr) => {\r\n//   globalSnapshot = [[...arr]];\r\n//   let size = 1;\r\n//   const len = arr.length;\r\n//   do {\r\n//     let i = 0;\r\n//     do {\r\n//       const L1 = i;\r\n//       const R1 = i + size - 1;\r\n//       const L2 = i + size;\r\n//       let R2 = i + 2 * size - 1;\r\n//       if (L2 >= len) break;\r\n//       if (R2 >= len) R2 = len - 1;\r\n//       const temp = mergeArray(arr, L1, R1, L2, R2);\r\n//       let j = 0;\r\n//       do {\r\n//         arr[i + j] = temp[j];\r\n//         globalSnapshot.push([...arr]);\r\n//         j++;\r\n//       } while (j <= R2 - L1 + 1);\r\n//       i = i + 2 * size;\r\n//     } while (i < len);\r\n//     size = 2 * size;\r\n//   } while (size < len);\r\n//   return globalSnapshot;\r\n// };\r\n\r\n// const mergeArray = (arr, L1, R1, L2, R2) => {\r\n//   let temp = [];\r\n//   let i = 0;\r\n//   // While Both Sub-Arrays Can Be Spliced\r\n//   do {\r\n//     if (arr[L1] <= arr[L2]) {\r\n//       temp[i] = arr[L1];\r\n//       i++;\r\n//       L1++;\r\n//     } else {\r\n//       temp[i] = arr[L2];\r\n//       i++;\r\n//       L2++;\r\n//     }\r\n//   } while (L1 <= R1 && L2 <= R2);\r\n\r\n//   // While Left Sub-Arrays Can Be Spliced\r\n//   do {\r\n//     temp[i] = arr[L1];\r\n//     i++;\r\n//     L1++;\r\n//   } while (L1 <= R1);\r\n\r\n//   // While Right Sub-Arrays Can Be Spliced\r\n//   do {\r\n//     temp[i] = arr[L2];\r\n//     i++;\r\n//     L2++;\r\n//   } while (L2 <= R2);\r\n\r\n//   return temp;\r\n// };\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}