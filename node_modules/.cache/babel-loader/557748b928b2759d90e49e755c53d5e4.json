{"ast":null,"code":"let globalSnapshot = [];\nlet globalArr = [];\n\nconst mergeSort = arr => {\n  globalArr = arr;\n  globalSnapshot = [[...arr]];\n  mergeSortHelper(globalArr);\n  return globalSnapshot;\n};\n\nconst mergeSortHelper = arr => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  if (arr.length <= 1) {\n    return;\n  } else {\n    i = 0;\n    j = 0;\n    k = 0;\n    const mid = parseInt(arr.length / 2); // Split left part\n\n    const left = new Array(mid).fill(0);\n\n    for (i = 0; i < mid; i++) {\n      left[i] = arr[i];\n      console.log(left);\n    } // Split right part\n\n\n    const right = new Array(arr.length - mid).fill(0);\n\n    for (i = mid; i < arr.length; i++) {\n      right[i - mid] = arr[i];\n    }\n\n    mergeSortHelper(left);\n    mergeSortHelper(right);\n    i = 0;\n    j = 0;\n    k = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i] < right[j]) {\n        arr[k].value = left[i];\n        i++;\n      } else {\n        arr[k].value = right[j];\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      arr[k].value = left[i];\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      arr[k].value = right[j];\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","globalArr","mergeSort","arr","mergeSortHelper","i","j","k","length","mid","parseInt","left","Array","fill","console","log","right","value"],"mappings":"AAAA,IAAIA,cAAc,GAAG,EAArB;AACA,IAAIC,SAAS,GAAG,EAAhB;;AAEA,MAAMC,SAAS,GAAIC,GAAD,IAAS;AACzBF,EAAAA,SAAS,GAAGE,GAAZ;AACAH,EAAAA,cAAc,GAAG,CAAC,CAAC,GAAGG,GAAJ,CAAD,CAAjB;AACAC,EAAAA,eAAe,CAACH,SAAD,CAAf;AACA,SAAOD,cAAP;AACD,CALD;;AAOA,MAAMI,eAAe,GAAID,GAAD,IAAS;AAC/B,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,MAAIJ,GAAG,CAACK,MAAJ,IAAc,CAAlB,EAAqB;AACnB;AACD,GAFD,MAEO;AACLH,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AAEA,UAAME,GAAG,GAAGC,QAAQ,CAACP,GAAG,CAACK,MAAJ,GAAa,CAAd,CAApB,CALK,CAOL;;AACA,UAAMG,IAAI,GAAG,IAAIC,KAAJ,CAAUH,GAAV,EAAeI,IAAf,CAAoB,CAApB,CAAb;;AACA,SAAKR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGI,GAAhB,EAAqBJ,CAAC,EAAtB,EAA0B;AACxBM,MAAAA,IAAI,CAACN,CAAD,CAAJ,GAAUF,GAAG,CAACE,CAAD,CAAb;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACD,KAZI,CAcL;;;AACA,UAAMK,KAAK,GAAG,IAAIJ,KAAJ,CAAUT,GAAG,CAACK,MAAJ,GAAaC,GAAvB,EAA4BI,IAA5B,CAAiC,CAAjC,CAAd;;AACA,SAAKR,CAAC,GAAGI,GAAT,EAAcJ,CAAC,GAAGF,GAAG,CAACK,MAAtB,EAA8BH,CAAC,EAA/B,EAAmC;AACjCW,MAAAA,KAAK,CAACX,CAAC,GAAGI,GAAL,CAAL,GAAiBN,GAAG,CAACE,CAAD,CAApB;AACD;;AACDD,IAAAA,eAAe,CAACO,IAAD,CAAf;AACAP,IAAAA,eAAe,CAACY,KAAD,CAAf;AAEAX,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ;AACAC,IAAAA,CAAC,GAAG,CAAJ,CAxBK,CA0BL;;AACA,WAAOF,CAAC,GAAGM,IAAI,CAACH,MAAT,IAAmBF,CAAC,GAAGU,KAAK,CAACR,MAApC,EAA4C;AAC1C,UAAIG,IAAI,CAACN,CAAD,CAAJ,GAAUW,KAAK,CAACV,CAAD,CAAnB,EAAwB;AACtBH,QAAAA,GAAG,CAACI,CAAD,CAAH,CAAOU,KAAP,GAAeN,IAAI,CAACN,CAAD,CAAnB;AACAA,QAAAA,CAAC;AACF,OAHD,MAGO;AACLF,QAAAA,GAAG,CAACI,CAAD,CAAH,CAAOU,KAAP,GAAeD,KAAK,CAACV,CAAD,CAApB;AACAA,QAAAA,CAAC;AACF;;AACDC,MAAAA,CAAC;AACF,KApCI,CAqCL;;;AACA,WAAOF,CAAC,GAAGM,IAAI,CAACH,MAAhB,EAAwB;AACtBL,MAAAA,GAAG,CAACI,CAAD,CAAH,CAAOU,KAAP,GAAeN,IAAI,CAACN,CAAD,CAAnB;AACAA,MAAAA,CAAC;AACDE,MAAAA,CAAC;AACF;;AACD,WAAOD,CAAC,GAAGU,KAAK,CAACR,MAAjB,EAAyB;AACvBL,MAAAA,GAAG,CAACI,CAAD,CAAH,CAAOU,KAAP,GAAeD,KAAK,CAACV,CAAD,CAApB;AACAA,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACF;AACF;AACF,CAxDD;;AA0DA,eAAeL,SAAf","sourcesContent":["let globalSnapshot = [];\r\nlet globalArr = [];\r\n\r\nconst mergeSort = (arr) => {\r\n  globalArr = arr;\r\n  globalSnapshot = [[...arr]];\r\n  mergeSortHelper(globalArr);\r\n  return globalSnapshot;\r\n};\r\n\r\nconst mergeSortHelper = (arr) => {\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = 0;\r\n\r\n  if (arr.length <= 1) {\r\n    return;\r\n  } else {\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    const mid = parseInt(arr.length / 2);\r\n\r\n    // Split left part\r\n    const left = new Array(mid).fill(0);\r\n    for (i = 0; i < mid; i++) {\r\n      left[i] = arr[i];\r\n      console.log(left);\r\n    }\r\n\r\n    // Split right part\r\n    const right = new Array(arr.length - mid).fill(0);\r\n    for (i = mid; i < arr.length; i++) {\r\n      right[i - mid] = arr[i];\r\n    }\r\n    mergeSortHelper(left);\r\n    mergeSortHelper(right);\r\n\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i] < right[j]) {\r\n        arr[k].value = left[i];\r\n        i++;\r\n      } else {\r\n        arr[k].value = right[j];\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      arr[k].value = left[i];\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      arr[k].value = right[j];\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}