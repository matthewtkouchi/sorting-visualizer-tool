{"ast":null,"code":"let globalSnapshot = [];\nlet globalArr = [];\nlet globalIdx = 0;\n\nconst mergeSort = arr => {\n  globalArr = arr;\n  globalSnapshot = [[...arr]];\n  mergeSortHelper(globalArr);\n  return globalSnapshot;\n};\n\nconst mergeSortHelper = arr => {\n  if (arr === null) {\n    return;\n  }\n\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  if (arr.length > 1) {\n    i = 0;\n    j = 0;\n    k = 0;\n    const mid = parseInt(arr.length / 2); // Split left part\n    //const left = arr.slice(0, mid);\n\n    const left = new Array(mid).fill(0);\n\n    for (i = 0; i < mid; i++) {\n      left[i] = arr[i];\n    } // Split right part\n    //const right = arr.slice(mid, arr.length);\n\n\n    const right = new Array(arr.length - mid).fill(0);\n\n    for (i = mid; i < arr.length; i++) {\n      right[i - mid] = arr[i];\n    }\n\n    mergeSortHelper(left);\n    mergeSortHelper(right);\n    i = 0;\n    j = 0; // Merge left and right arrays\n\n    while (i < left.length && j < right.length) {\n      if (left[i].value < right[j].value) {\n        arr[k] = left[i];\n        globalArr[globalIdx] = arr[k];\n        globalIdx++;\n        globalSnapshot.push([...globalArr]);\n        i++;\n      } else {\n        arr[k] = right[j];\n        globalArr[globalIdx] = arr[k];\n        globalIdx++;\n        globalSnapshot.push([...globalArr]);\n        j++;\n      }\n\n      k++;\n    } // Collect remaining elements\n\n\n    while (i < left.length) {\n      arr[k] = left[i];\n      globalArr[globalIdx] = arr[k];\n      globalIdx++;\n      globalSnapshot.push([...globalArr]);\n      i++;\n      k++;\n    }\n\n    while (j < right.length) {\n      arr[k] = right[j];\n      globalSnapshot.push([...globalArr]);\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default mergeSort;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/algorithms/mergeSort.js"],"names":["globalSnapshot","globalArr","globalIdx","mergeSort","arr","mergeSortHelper","i","j","k","length","mid","parseInt","left","Array","fill","right","value","push"],"mappings":"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","sourcesContent":["let globalSnapshot = [];\r\nlet globalArr = [];\r\nlet globalIdx = 0;\r\n\r\nconst mergeSort = (arr) => {\r\n  globalArr = arr;\r\n  globalSnapshot = [[...arr]];\r\n  mergeSortHelper(globalArr);\r\n  return globalSnapshot;\r\n};\r\n\r\nconst mergeSortHelper = (arr) => {\r\n  if (arr === null) {\r\n    return;\r\n  }\r\n  let i = 0;\r\n  let j = 0;\r\n  let k = 0;\r\n\r\n  if (arr.length > 1) {\r\n    i = 0;\r\n    j = 0;\r\n    k = 0;\r\n\r\n    const mid = parseInt(arr.length / 2);\r\n\r\n    // Split left part\r\n    //const left = arr.slice(0, mid);\r\n    const left = new Array(mid).fill(0);\r\n    for (i = 0; i < mid; i++) {\r\n      left[i] = arr[i];\r\n    }\r\n\r\n    // Split right part\r\n    //const right = arr.slice(mid, arr.length);\r\n    const right = new Array(arr.length - mid).fill(0);\r\n    for (i = mid; i < arr.length; i++) {\r\n      right[i - mid] = arr[i];\r\n    }\r\n\r\n    mergeSortHelper(left);\r\n    mergeSortHelper(right);\r\n\r\n    i = 0;\r\n    j = 0;\r\n\r\n    // Merge left and right arrays\r\n    while (i < left.length && j < right.length) {\r\n      if (left[i].value < right[j].value) {\r\n        arr[k] = left[i];\r\n        globalArr[globalIdx] = arr[k];\r\n        globalIdx++;\r\n        globalSnapshot.push([...globalArr]);\r\n        i++;\r\n      } else {\r\n        arr[k] = right[j];\r\n        globalArr[globalIdx] = arr[k];\r\n        globalIdx++;\r\n        globalSnapshot.push([...globalArr]);\r\n        j++;\r\n      }\r\n      k++;\r\n    }\r\n    // Collect remaining elements\r\n    while (i < left.length) {\r\n      arr[k] = left[i];\r\n      globalArr[globalIdx] = arr[k];\r\n      globalIdx++;\r\n      globalSnapshot.push([...globalArr]);\r\n      i++;\r\n      k++;\r\n    }\r\n    while (j < right.length) {\r\n      arr[k] = right[j];\r\n      globalSnapshot.push([...globalArr]);\r\n      j++;\r\n      k++;\r\n    }\r\n  }\r\n};\r\n\r\nexport default mergeSort;\r\n"]},"metadata":{},"sourceType":"module"}