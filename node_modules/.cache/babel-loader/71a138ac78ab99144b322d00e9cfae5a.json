{"ast":null,"code":"var _s = $RefreshSig$();\n\n/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: useSorting.js\r\n Date: MAY_31_2021\r\n \r\n Abstract: Contains custom hook (useSorting), which contains state hooks for different sorting options. After default states are set\r\n event handlers are decalared to use the set sorting options. These include resetting the current array to a new random array, \r\n stopping the current sort, starting the current sort, and event handlers that reset the array if an input is changed mid sort. \r\n***************************************************************************************************************************************/\nimport sortingAlgorithms from \"../algorithms/sortingAlgorithm\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport { generateRandomArr } from \"../algorithms/util\";\n\nconst useSorting = e => {\n  _s();\n\n  const [arrSize, setArrSize] = useState(e.arrSize);\n  const [algorithm, setAlgorithm] = useState(e.algorithm);\n  const [sortSpeed, setSortSpeed] = useState(e.sortSpeed);\n  const [currentArray, setCurrentArray] = useState(() => generateRandomArr(arrSize)); // Reset the Array\n\n  const resetArray = useCallback(() => {\n    setCurrentArray(generateRandomArr(arrSize));\n  }, [arrSize]); // Start Animating the Sort\n\n  const startAnimating = () => {\n    const arrSnapshot = sortingAlgorithms[algorithm](currentArray);\n    const len = arrSnapshot.length;\n\n    for (let i = 0; i < arrSnapshot.length; i++) {\n      setTimeout(() => {\n        setCurrentArray(arrSnapshot[i]);\n      }, (i + 1) * parseInt(sortSpeed));\n    }\n  }; // Stop Sorting\n\n\n  const stopAnimating = useCallback(() => {\n    let timeoutId = setTimeout(() => null, 0);\n\n    while (timeoutId >= 0) {\n      clearTimeout(timeoutId);\n      timeoutId--;\n    }\n  }, []); // Update Array In the Event of an Input Change During a Sort\n\n  useEffect(() => {\n    stopAnimating();\n    resetArray();\n  }, [algorithm, sortSpeed, arrSize, resetArray, stopAnimating]); // Return props to control the array's state, animations, and configurations\n\n  return {\n    array: {\n      currentArray\n    },\n    animation: {\n      startAnimating,\n      stopAnimating,\n      resetArray\n    },\n    settings: {\n      algorithm,\n      arrSize,\n      sortSpeed,\n      setAlgorithm,\n      setSortSpeed,\n      setArrSize\n    }\n  };\n};\n\n_s(useSorting, \"3qWYy3j5Yd9gHmk4HZi5A8VVQzk=\");\n\nexport default useSorting;","map":{"version":3,"sources":["C:/Users/mkouc/OneDrive/Desktop/sorting_visualizer/src/scripts/hooks/useSorting.js"],"names":["sortingAlgorithms","useState","useEffect","useCallback","generateRandomArr","useSorting","e","arrSize","setArrSize","algorithm","setAlgorithm","sortSpeed","setSortSpeed","currentArray","setCurrentArray","resetArray","startAnimating","arrSnapshot","len","length","i","setTimeout","parseInt","stopAnimating","timeoutId","clearTimeout","array","animation","settings"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,iBAAP,MAA8B,gCAA9B;AAEA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,iBAAT,QAAkC,oBAAlC;;AAEA,MAAMC,UAAU,GAAIC,CAAD,IAAO;AAAA;;AACxB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACK,CAAC,CAACC,OAAH,CAAtC;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACK,CAAC,CAACG,SAAH,CAA1C;AACA,QAAM,CAACE,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAACK,CAAC,CAACK,SAAH,CAA1C;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,MAC/CG,iBAAiB,CAACG,OAAD,CAD6B,CAAhD,CAJwB,CAQxB;;AACA,QAAMQ,UAAU,GAAGZ,WAAW,CAAC,MAAM;AACnCW,IAAAA,eAAe,CAACV,iBAAiB,CAACG,OAAD,CAAlB,CAAf;AACD,GAF6B,EAE3B,CAACA,OAAD,CAF2B,CAA9B,CATwB,CAaxB;;AACA,QAAMS,cAAc,GAAG,MAAM;AAC3B,UAAMC,WAAW,GAAGjB,iBAAiB,CAACS,SAAD,CAAjB,CAA6BI,YAA7B,CAApB;AACA,UAAMK,GAAG,GAAGD,WAAW,CAACE,MAAxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AAC3CC,MAAAA,UAAU,CAAC,MAAM;AACfP,QAAAA,eAAe,CAACG,WAAW,CAACG,CAAD,CAAZ,CAAf;AACD,OAFS,EAEP,CAACA,CAAC,GAAG,CAAL,IAAUE,QAAQ,CAACX,SAAD,CAFX,CAAV;AAGD;AACF,GARD,CAdwB,CAwBxB;;;AACA,QAAMY,aAAa,GAAGpB,WAAW,CAAC,MAAM;AACtC,QAAIqB,SAAS,GAAGH,UAAU,CAAC,MAAM,IAAP,EAAa,CAAb,CAA1B;;AACA,WAAOG,SAAS,IAAI,CAApB,EAAuB;AACrBC,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACAA,MAAAA,SAAS;AACV;AACF,GANgC,EAM9B,EAN8B,CAAjC,CAzBwB,CAiCxB;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,aAAa;AACbR,IAAAA,UAAU;AACX,GAHQ,EAGN,CAACN,SAAD,EAAYE,SAAZ,EAAuBJ,OAAvB,EAAgCQ,UAAhC,EAA4CQ,aAA5C,CAHM,CAAT,CAlCwB,CAuCxB;;AAEA,SAAO;AACLG,IAAAA,KAAK,EAAE;AAAEb,MAAAA;AAAF,KADF;AAELc,IAAAA,SAAS,EAAE;AAAEX,MAAAA,cAAF;AAAkBO,MAAAA,aAAlB;AAAiCR,MAAAA;AAAjC,KAFN;AAGLa,IAAAA,QAAQ,EAAE;AACRnB,MAAAA,SADQ;AAERF,MAAAA,OAFQ;AAGRI,MAAAA,SAHQ;AAIRD,MAAAA,YAJQ;AAKRE,MAAAA,YALQ;AAMRJ,MAAAA;AANQ;AAHL,GAAP;AAYD,CArDD;;GAAMH,U;;AAuDN,eAAeA,UAAf","sourcesContent":["/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: useSorting.js\r\n Date: MAY_31_2021\r\n \r\n Abstract: Contains custom hook (useSorting), which contains state hooks for different sorting options. After default states are set\r\n event handlers are decalared to use the set sorting options. These include resetting the current array to a new random array, \r\n stopping the current sort, starting the current sort, and event handlers that reset the array if an input is changed mid sort. \r\n***************************************************************************************************************************************/\r\nimport sortingAlgorithms from \"../algorithms/sortingAlgorithm\";\r\n\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { generateRandomArr } from \"../algorithms/util\";\r\n\r\nconst useSorting = (e) => {\r\n  const [arrSize, setArrSize] = useState(e.arrSize);\r\n  const [algorithm, setAlgorithm] = useState(e.algorithm);\r\n  const [sortSpeed, setSortSpeed] = useState(e.sortSpeed);\r\n  const [currentArray, setCurrentArray] = useState(() =>\r\n    generateRandomArr(arrSize)\r\n  );\r\n\r\n  // Reset the Array\r\n  const resetArray = useCallback(() => {\r\n    setCurrentArray(generateRandomArr(arrSize));\r\n  }, [arrSize]);\r\n\r\n  // Start Animating the Sort\r\n  const startAnimating = () => {\r\n    const arrSnapshot = sortingAlgorithms[algorithm](currentArray);\r\n    const len = arrSnapshot.length;\r\n    for (let i = 0; i < arrSnapshot.length; i++) {\r\n      setTimeout(() => {\r\n        setCurrentArray(arrSnapshot[i]);\r\n      }, (i + 1) * parseInt(sortSpeed));\r\n    }\r\n  };\r\n\r\n  // Stop Sorting\r\n  const stopAnimating = useCallback(() => {\r\n    let timeoutId = setTimeout(() => null, 0);\r\n    while (timeoutId >= 0) {\r\n      clearTimeout(timeoutId);\r\n      timeoutId--;\r\n    }\r\n  }, []);\r\n\r\n  // Update Array In the Event of an Input Change During a Sort\r\n  useEffect(() => {\r\n    stopAnimating();\r\n    resetArray();\r\n  }, [algorithm, sortSpeed, arrSize, resetArray, stopAnimating]);\r\n\r\n  // Return props to control the array's state, animations, and configurations\r\n\r\n  return {\r\n    array: { currentArray },\r\n    animation: { startAnimating, stopAnimating, resetArray },\r\n    settings: {\r\n      algorithm,\r\n      arrSize,\r\n      sortSpeed,\r\n      setAlgorithm,\r\n      setSortSpeed,\r\n      setArrSize,\r\n    },\r\n  };\r\n};\r\n\r\nexport default useSorting;\r\n"]},"metadata":{},"sourceType":"module"}