{"ast":null,"code":"const insertionSort = unsortedArray => {\n  // Declare Local Variables\n  let arr = [...unsortedArray];\n  let arrSnapshot = [[...arr]]; // Each Idx contains an array snapshot\n\n  const len = arr.length;\n\n  for (let i = 1; i < len; i++) {\n    const current = arr[i].value;\n    let j = i - 1;\n    let temp;\n\n    while (j >= 0 && arr[j].value > current) {\n      //Swap to prevent duplicate values at multiple indexes\n      temp = arr[j + 1];\n      arr[j + 1] = { ...arr[j],\n        highlighted: true\n      };\n      arr[j] = temp; //Take snap and decrement\n\n      arrSnapshot.push([...arr]);\n      arr[j + 1] = { ...arr[j + 1],\n        highlighted: false\n      };\n      j--;\n    } //Set next current value\n\n\n    arr[j + 1].value = current;\n    arrSnapshot.push([...arr]);\n  }\n\n  return arrSnapshot;\n};\n\nexport default insertionSort;","map":{"version":3,"sources":["C:/Users/mkouc/sorting_visualizer/src/scripts/algorithms/insertionSort.js"],"names":["insertionSort","unsortedArray","arr","arrSnapshot","len","length","i","current","value","j","temp","highlighted","push"],"mappings":"AAAA,MAAMA,aAAa,GAAIC,aAAD,IAAmB;AACvC;AACA,MAAIC,GAAG,GAAG,CAAC,GAAGD,aAAJ,CAAV;AACA,MAAIE,WAAW,GAAG,CAAC,CAAC,GAAGD,GAAJ,CAAD,CAAlB,CAHuC,CAGT;;AAC9B,QAAME,GAAG,GAAGF,GAAG,CAACG,MAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,UAAMC,OAAO,GAAGL,GAAG,CAACI,CAAD,CAAH,CAAOE,KAAvB;AACA,QAAIC,CAAC,GAAGH,CAAC,GAAG,CAAZ;AACA,QAAII,IAAJ;;AACA,WAAOD,CAAC,IAAI,CAAL,IAAUP,GAAG,CAACO,CAAD,CAAH,CAAOD,KAAP,GAAeD,OAAhC,EAAyC;AACvC;AACAG,MAAAA,IAAI,GAAGR,GAAG,CAACO,CAAC,GAAG,CAAL,CAAV;AACAP,MAAAA,GAAG,CAACO,CAAC,GAAG,CAAL,CAAH,GAAa,EAAE,GAAGP,GAAG,CAACO,CAAD,CAAR;AAAaE,QAAAA,WAAW,EAAE;AAA1B,OAAb;AACAT,MAAAA,GAAG,CAACO,CAAD,CAAH,GAASC,IAAT,CAJuC,CAKvC;;AACAP,MAAAA,WAAW,CAACS,IAAZ,CAAiB,CAAC,GAAGV,GAAJ,CAAjB;AACAA,MAAAA,GAAG,CAACO,CAAC,GAAG,CAAL,CAAH,GAAa,EAAE,GAAGP,GAAG,CAACO,CAAC,GAAG,CAAL,CAAR;AAAiBE,QAAAA,WAAW,EAAE;AAA9B,OAAb;AACAF,MAAAA,CAAC;AACF,KAb2B,CAc5B;;;AACAP,IAAAA,GAAG,CAACO,CAAC,GAAG,CAAL,CAAH,CAAWD,KAAX,GAAmBD,OAAnB;AACAJ,IAAAA,WAAW,CAACS,IAAZ,CAAiB,CAAC,GAAGV,GAAJ,CAAjB;AACD;;AACD,SAAOC,WAAP;AACD,CAxBD;;AA0BA,eAAeH,aAAf","sourcesContent":["const insertionSort = (unsortedArray) => {\r\n  // Declare Local Variables\r\n  let arr = [...unsortedArray];\r\n  let arrSnapshot = [[...arr]]; // Each Idx contains an array snapshot\r\n  const len = arr.length;\r\n  for (let i = 1; i < len; i++) {\r\n    const current = arr[i].value;\r\n    let j = i - 1;\r\n    let temp;\r\n    while (j >= 0 && arr[j].value > current) {\r\n      //Swap to prevent duplicate values at multiple indexes\r\n      temp = arr[j + 1];\r\n      arr[j + 1] = { ...arr[j], highlighted: true };\r\n      arr[j] = temp;\r\n      //Take snap and decrement\r\n      arrSnapshot.push([...arr]);\r\n      arr[j + 1] = { ...arr[j + 1], highlighted: false };\r\n      j--;\r\n    }\r\n    //Set next current value\r\n    arr[j + 1].value = current;\r\n    arrSnapshot.push([...arr]);\r\n  }\r\n  return arrSnapshot;\r\n};\r\n\r\nexport default insertionSort;\r\n"]},"metadata":{},"sourceType":"module"}