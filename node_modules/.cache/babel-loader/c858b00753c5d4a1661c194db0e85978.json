{"ast":null,"code":"const insertionSort = unsortedArray => {\n  // Declare Local Variables\n  let arr = [...unsortedArray];\n  let arrSnapshot = [[...arr]]; // Each Idx contains an array snapshot\n\n  const len = arr.length;\n\n  for (let i = 1; i < len; i++) {\n    const current = arr[i];\n    let j = i - 1;\n\n    while (j >= 0 && arr[j] > current) {\n      arr[j + 1] = arr[j];\n      arr[j + 1] = { ...arr[j + 1],\n        highlighted: true\n      };\n      arrSnapshot.push([...arr]);\n      arr[j + 1] = { ...arr[j + 1],\n        highlighted: false\n      };\n      j--;\n    }\n\n    arr[j + 1] = current;\n    arr[j + 1] = { ...arr[j + 1],\n      highlighted: true\n    };\n    arrSnapshot.push([...arr]);\n    arr[j + 1] = { ...arr[j + 1],\n      highlighted: false\n    };\n  }\n\n  return arrSnapshot;\n};\n\nexport default insertionSort;","map":{"version":3,"sources":["C:/Users/mkouc/sorting_visualizer/src/scripts/algorithms/insertionSort.js"],"names":["insertionSort","unsortedArray","arr","arrSnapshot","len","length","i","current","j","highlighted","push"],"mappings":"AAAA,MAAMA,aAAa,GAAIC,aAAD,IAAmB;AACvC;AACA,MAAIC,GAAG,GAAG,CAAC,GAAGD,aAAJ,CAAV;AACA,MAAIE,WAAW,GAAG,CAAC,CAAC,GAAGD,GAAJ,CAAD,CAAlB,CAHuC,CAGT;;AAC9B,QAAME,GAAG,GAAGF,GAAG,CAACG,MAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,UAAMC,OAAO,GAAGL,GAAG,CAACI,CAAD,CAAnB;AACA,QAAIE,CAAC,GAAGF,CAAC,GAAG,CAAZ;;AACA,WAAOE,CAAC,IAAI,CAAL,IAAUN,GAAG,CAACM,CAAD,CAAH,GAASD,OAA1B,EAAmC;AACjCL,MAAAA,GAAG,CAACM,CAAC,GAAG,CAAL,CAAH,GAAaN,GAAG,CAACM,CAAD,CAAhB;AACAN,MAAAA,GAAG,CAACM,CAAC,GAAG,CAAL,CAAH,GAAa,EAAE,GAAGN,GAAG,CAACM,CAAC,GAAG,CAAL,CAAR;AAAiBC,QAAAA,WAAW,EAAE;AAA9B,OAAb;AACAN,MAAAA,WAAW,CAACO,IAAZ,CAAiB,CAAC,GAAGR,GAAJ,CAAjB;AACAA,MAAAA,GAAG,CAACM,CAAC,GAAG,CAAL,CAAH,GAAa,EAAE,GAAGN,GAAG,CAACM,CAAC,GAAG,CAAL,CAAR;AAAiBC,QAAAA,WAAW,EAAE;AAA9B,OAAb;AACAD,MAAAA,CAAC;AACF;;AACDN,IAAAA,GAAG,CAACM,CAAC,GAAG,CAAL,CAAH,GAAaD,OAAb;AACAL,IAAAA,GAAG,CAACM,CAAC,GAAG,CAAL,CAAH,GAAa,EAAE,GAAGN,GAAG,CAACM,CAAC,GAAG,CAAL,CAAR;AAAiBC,MAAAA,WAAW,EAAE;AAA9B,KAAb;AACAN,IAAAA,WAAW,CAACO,IAAZ,CAAiB,CAAC,GAAGR,GAAJ,CAAjB;AACAA,IAAAA,GAAG,CAACM,CAAC,GAAG,CAAL,CAAH,GAAa,EAAE,GAAGN,GAAG,CAACM,CAAC,GAAG,CAAL,CAAR;AAAiBC,MAAAA,WAAW,EAAE;AAA9B,KAAb;AACD;;AACD,SAAON,WAAP;AACD,CArBD;;AAuBA,eAAeH,aAAf","sourcesContent":["const insertionSort = (unsortedArray) => {\r\n  // Declare Local Variables\r\n  let arr = [...unsortedArray];\r\n  let arrSnapshot = [[...arr]]; // Each Idx contains an array snapshot\r\n  const len = arr.length;\r\n  for (let i = 1; i < len; i++) {\r\n    const current = arr[i];\r\n    let j = i - 1;\r\n    while (j >= 0 && arr[j] > current) {\r\n      arr[j + 1] = arr[j];\r\n      arr[j + 1] = { ...arr[j + 1], highlighted: true };\r\n      arrSnapshot.push([...arr]);\r\n      arr[j + 1] = { ...arr[j + 1], highlighted: false };\r\n      j--;\r\n    }\r\n    arr[j + 1] = current;\r\n    arr[j + 1] = { ...arr[j + 1], highlighted: true };\r\n    arrSnapshot.push([...arr]);\r\n    arr[j + 1] = { ...arr[j + 1], highlighted: false };\r\n  }\r\n  return arrSnapshot;\r\n};\r\n\r\nexport default insertionSort;\r\n"]},"metadata":{},"sourceType":"module"}