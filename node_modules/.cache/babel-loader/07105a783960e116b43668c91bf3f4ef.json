{"ast":null,"code":"/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: quickSort.js\r\n Date: JUN_6_2021\r\n \r\n Abstract: Quick sort uses a pivot and partitions the array to have indexes with lesser values on one side and with greater values on\r\n the opposite side. Then afer setting a new pivot by ... , the array is partitioned again. This is done by recursivley calling \r\n quick sort on both sides of the pivot (both sides essentially act as individual arrays) This goes on until the starting idx is equal to \r\n or greater than the end idx, meaning each partition is just a single element.  \r\n***************************************************************************************************************************************/\nimport { swap } from \"./util\";\nlet globalArr = [];\nlet tempContainer = [];\n\nconst quickSort = unsortedArray => {\n  // Declarations\n  let initArray = [...unsortedArray];\n  let arrSnapshot = [[...initArray]];\n  const startIdx = 0;\n  const endIdx = initArray.length - 1;\n  console.log(endIdx); // Call Sorting Algorithm with Initial Conditions\n\n  arrSnapshot = doQuick(initArray, startIdx, endIdx, arrSnapshot);\n  return arrSnapshot;\n};\n\nconst doQuick = (arr, startIdx, endIdx, arrSnapshot) => {\n  // Check if array is fully partitioned\n  if (startIdx >= endIdx) {\n    return;\n  } // Declare a pivot idx\n\n\n  let arrContainer = partition(arr, startIdx, endIdx, arrSnapshot);\n  const index = arrContainer[arrContainer.length - 1];\n  arrContainer.pop(); // Recursivley quick sort either side of the pivot idx\n\n  tempContainer = doQuick(globalArr, startIdx, index - 1, arrContainer);\n  arrContainer = arrContainer.concat(tempContainer);\n  tempContainer = doQuick(globalArr, index + 1, endIdx, arrContainer);\n  arrContainer = arrContainer.concat(tempContainer);\n  return arrContainer;\n};\n\nconst partition = (arr, startIdx, endIdx, snap) => {\n  const pivotValue = arr[endIdx].value;\n  let pivotIdx = startIdx;\n\n  for (let i = startIdx; i < endIdx; i++) {\n    if (arr[i].value < pivotValue) {\n      swap(arr, i, pivotIdx);\n      arr[pivotIdx] = { ...arr[pivotIdx],\n        highlighted: true\n      };\n      snap.push([...arr]);\n      arr[pivotIdx] = { ...arr[pivotIdx],\n        highlighted: false\n      };\n      pivotIdx++;\n    }\n  }\n\n  swap(arr, pivotIdx, endIdx);\n  arr[endIdx] = { ...arr[endIdx],\n    highlighted: true\n  };\n  snap.push([...arr]);\n  arr[endIdx] = { ...arr[endIdx],\n    highlighted: false\n  };\n  globalArr = snap[snap.length - 1];\n  const arrSnapshot = snap.concat(pivotIdx);\n  return arrSnapshot;\n};\n\nexport default quickSort;","map":{"version":3,"sources":["C:/Users/mkouc/sorting_visualizer/src/scripts/algorithms/quickSort.js"],"names":["swap","globalArr","tempContainer","quickSort","unsortedArray","initArray","arrSnapshot","startIdx","endIdx","length","console","log","doQuick","arr","arrContainer","partition","index","pop","concat","snap","pivotValue","value","pivotIdx","i","highlighted","push"],"mappings":"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","sourcesContent":["/***************************************************************************************************************************************\r\n Name: Matthew Kouchi\r\n File: quickSort.js\r\n Date: JUN_6_2021\r\n \r\n Abstract: Quick sort uses a pivot and partitions the array to have indexes with lesser values on one side and with greater values on\r\n the opposite side. Then afer setting a new pivot by ... , the array is partitioned again. This is done by recursivley calling \r\n quick sort on both sides of the pivot (both sides essentially act as individual arrays) This goes on until the starting idx is equal to \r\n or greater than the end idx, meaning each partition is just a single element.  \r\n***************************************************************************************************************************************/\r\n\r\nimport { swap } from \"./util\";\r\n\r\nlet globalArr = [];\r\nlet tempContainer = [];\r\n\r\nconst quickSort = (unsortedArray) => {\r\n  // Declarations\r\n  let initArray = [...unsortedArray];\r\n  let arrSnapshot = [[...initArray]];\r\n  const startIdx = 0;\r\n  const endIdx = initArray.length - 1;\r\n  console.log(endIdx);\r\n\r\n  // Call Sorting Algorithm with Initial Conditions\r\n  arrSnapshot = doQuick(initArray, startIdx, endIdx, arrSnapshot);\r\n\r\n  return arrSnapshot;\r\n};\r\n\r\nconst doQuick = (arr, startIdx, endIdx, arrSnapshot) => {\r\n  // Check if array is fully partitioned\r\n  if (startIdx >= endIdx) {\r\n    return;\r\n  }\r\n\r\n  // Declare a pivot idx\r\n  let arrContainer = partition(arr, startIdx, endIdx, arrSnapshot);\r\n  const index = arrContainer[arrContainer.length - 1];\r\n\r\n  arrContainer.pop();\r\n\r\n  // Recursivley quick sort either side of the pivot idx\r\n  tempContainer = doQuick(globalArr, startIdx, index - 1, arrContainer);\r\n  arrContainer = arrContainer.concat(tempContainer);\r\n  tempContainer = doQuick(globalArr, index + 1, endIdx, arrContainer);\r\n  arrContainer = arrContainer.concat(tempContainer);\r\n\r\n  return arrContainer;\r\n};\r\n\r\nconst partition = (arr, startIdx, endIdx, snap) => {\r\n  const pivotValue = arr[endIdx].value;\r\n  let pivotIdx = startIdx;\r\n  for (let i = startIdx; i < endIdx; i++) {\r\n    if (arr[i].value < pivotValue) {\r\n      swap(arr, i, pivotIdx);\r\n      arr[pivotIdx] = { ...arr[pivotIdx], highlighted: true };\r\n      snap.push([...arr]);\r\n      arr[pivotIdx] = { ...arr[pivotIdx], highlighted: false };\r\n      pivotIdx++;\r\n    }\r\n  }\r\n\r\n  swap(arr, pivotIdx, endIdx);\r\n  arr[endIdx] = { ...arr[endIdx], highlighted: true };\r\n  snap.push([...arr]);\r\n  arr[endIdx] = { ...arr[endIdx], highlighted: false };\r\n\r\n  globalArr = snap[snap.length - 1];\r\n  const arrSnapshot = snap.concat(pivotIdx);\r\n\r\n  return arrSnapshot;\r\n};\r\n\r\nexport default quickSort;\r\n"]},"metadata":{},"sourceType":"module"}